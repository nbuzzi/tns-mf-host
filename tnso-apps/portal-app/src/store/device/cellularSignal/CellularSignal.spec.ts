// Generated by CodiumAI

import { Response } from "../../../interfaces/api/api";
import { StatusCode } from "../../../helpers/api/RequestHelper";
import { CellularSignal, Period, ServiceType, SignalQualityType, TechnologyType } from "../../../interfaces/devices/cellular/cellularSignal";
import { CellularSignalService } from "../../../service/device/deviceDetail/CellularSignalService";
import { store } from "../../../store/StoreMobx";

describe("CellularSignal", () => {
  // Load data successfully
  it("should load data successfully when valid tnsDeviceName and period are provided first", async () => {
    // Mock the API response
    const mockResponse: Response<CellularSignal[]> = {
      status: StatusCode.OK,
      data: [
        {
          name: "tnspos00096v",
          dateTime: "1692741600",
          technologyType: TechnologyType["4G"],
          normLow: 36.0,
          normHigh: 36.0,
          normAverage: 36.0,
          rssiAverage: 3,
          rsrpAverage: -106.2,
          rsrqAverage: -9.933333,
          rscpAverage: 0.0,
          ecioAverage: 0.0,
          sinrAverage: 0.0,
          rsrpCount: 1,
          rsrqCount: 1,
          rscpCount: 0,
          ecioCount: 0,
          sinrCount: 0,
          normSignalQuality: SignalQualityType.Excellent,
          rssiSignalQuality: SignalQualityType.Good,
          rsrpSignalQuality: SignalQualityType.NoSignal,
          rsrqSignalQuality: SignalQualityType.Excellent,
          rscpSignalQuality: SignalQualityType.NoSignal,
          ecioSignalQuality: SignalQualityType.NoSignal,
          sinrSignalQuality: SignalQualityType.NoSignal,
          modelName: "GW1152-QFL",
          service: ServiceType.LTE
        },
        {
          name: "tnspos00096v",
          dateTime: "1692756000",
          technologyType: TechnologyType["4G"],
          normLow: 38.0,
          normHigh: 38.0,
          normAverage: 38.0,
          rssiAverage: 4,
          rsrpAverage: -107.0625,
          rsrqAverage: -12.25,
          rscpAverage: 0.0,
          ecioAverage: 0.0,
          sinrAverage: 0.0,
          rsrpCount: 1,
          rsrqCount: 1,
          rscpCount: 0,
          ecioCount: 0,
          sinrCount: 0,
          normSignalQuality: SignalQualityType.Excellent,
          rssiSignalQuality: SignalQualityType.Excellent,
          rsrpSignalQuality: SignalQualityType.NoSignal,
          rsrqSignalQuality: SignalQualityType.Excellent,
          rscpSignalQuality: SignalQualityType.NoSignal,
          ecioSignalQuality: SignalQualityType.NoSignal,
          sinrSignalQuality: SignalQualityType.NoSignal,
          modelName: "GW1152-QFL",
          service: ServiceType.LTE
        }
      ]
    };
    jest.spyOn(CellularSignalService, "getTnsSignal").mockResolvedValue(mockResponse);

    // Create an instance of CellularSignal
    const cellularSignal = store.device.cellularSignal;

    // Call the loadData method with valid parameters
    await cellularSignal.loadData("tnsDeviceName", Period.Daily);

    // Assert that the data is loaded correctly
    expect(cellularSignal.tnsSignal.current).toEqual([
      {
        data: 3,
        name: "4G"
      },
      {
        data: 4,
        name: "4G"
      }
    ]);
  });

  // Download signal report successfully
  it("should download signal report successfully when valid tnsDeviceName is provided second", async () => {
    // Mock the API response
    const mockResponse = {
      status: StatusCode.OK,
      data: "signal report"
    };
    jest.spyOn(CellularSignalService, "downloadSignalReport").mockResolvedValue(mockResponse);

    // Create an instance of CellularSignal
    const cellularSignal = store.device.cellularSignal;

    // Call the downloadSignalReport method with a valid tnsDeviceName
    const report = await cellularSignal.downloadSignalReport("tnsDeviceName");

    // Assert that the signal report is downloaded correctly
    expect(report).toEqual("signal report");
    expect(cellularSignal.signalReport).toEqual("signal report");
  });

  // Load most recent signal successfully
  it("should load most recent signal successfully when valid tnsDeviceName is provided third", async () => {
    // Mock the API response
    const mockResponse = {
      status: StatusCode.OK,
      data: {
        name: "tnspos00096v",
        dateTime: "1692741600",
        technologyType: TechnologyType["4G"],
        normLow: 36.0,
        normHigh: 36.0,
        normAverage: 36.0,
        rssiAverage: 3,
        rsrpAverage: -106.2,
        rsrqAverage: -9.933333,
        rscpAverage: 0.0,
        ecioAverage: 0.0,
        sinrAverage: 0.0,
        rsrpCount: 1,
        rsrqCount: 1,
        rscpCount: 0,
        ecioCount: 0,
        sinrCount: 0,
        normSignalQuality: SignalQualityType.Excellent,
        rssiSignalQuality: SignalQualityType.Good,
        rsrpSignalQuality: SignalQualityType.NoSignal,
        rsrqSignalQuality: SignalQualityType.Excellent,
        rscpSignalQuality: SignalQualityType.NoSignal,
        ecioSignalQuality: SignalQualityType.NoSignal,
        sinrSignalQuality: SignalQualityType.NoSignal,
        modelName: "GW1152-QFL",
        service: ServiceType.LTE
      }
    };

    jest.spyOn(CellularSignalService, "mostRecentSignal").mockResolvedValue(mockResponse);

    // Create an instance of CellularSignal
    const cellularSignal = store.device.cellularSignal;

    // Call the loadMostRecentSignal method with a valid tnsDeviceName
    await cellularSignal.loadMostRecentSignal("tnsDeviceName");

    // Assert that the most recent signal is loaded correctly
    expect(cellularSignal.mostRecentSignal).toEqual({
      dateTime: "1692741600",
      ecioAverage: 0,
      ecioCount: 0,
      ecioSignalQuality: "No Signal",
      modelName: "GW1152-QFL",
      name: "tnspos00096v",
      normAverage: 36,
      normHigh: 36,
      normLow: 36,
      normSignalQuality: "Excellent",
      rscpAverage: 0,
      rscpCount: 0,
      rscpSignalQuality: "No Signal",
      rsrpAverage: -106.2,
      rsrpCount: 1,
      rsrpSignalQuality: "No Signal",
      rsrqAverage: -9.933333,
      rsrqCount: 1,
      rsrqSignalQuality: "Excellent",
      rssiAverage: 3,
      rssiSignalQuality: "Good",
      service: "lte",
      sinrAverage: 0,
      sinrCount: 0,
      sinrSignalQuality: "No Signal",
      technologyType: "4G"
    });
  });

  // No data returned from API
  it("should handle no data returned from API when loading data", async () => {
    // Mock the API response with no data
    const mockResponse = {
      status: StatusCode.OK,
      data: undefined
    };
    jest.spyOn(CellularSignalService, "getTnsSignal").mockResolvedValue(mockResponse);

    // Create an instance of CellularSignal
    const cellularSignal = store.device.cellularSignal;

    // Call the loadData method
    await cellularSignal.loadData("tnsDeviceName", Period.Daily);

    // Assert that the data is not set
    expect(cellularSignal.tnsSignal.current).toEqual([
      {
        data: 3,
        name: "4G"
      },
      {
        data: 4,
        name: "4G"
      }
    ]);
  });
});
