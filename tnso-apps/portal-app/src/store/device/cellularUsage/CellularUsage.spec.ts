// Generated by CodiumAI

import { CellularUsage, CellularUsageBilling, CellularUsageBillingPeriod, DailyUsageStatus } from "../../../interfaces/devices/cellular/cellularUsage";
import { StatusCode } from "../../../helpers/api/RequestHelper";
import { CellularUsageService } from "../../../service/device/deviceDetail/CellularUsageService";
import { store } from "../../../store/StoreMobx";
import cellularUsage from "./CellularUsage";

describe("CellularUsage", () => {
  const usageDataMock1: CellularUsage = {
    name: "tnsDeviceName",
    startDate: "2020-01-01",
    endDate: "2020-01-02",
    planSize: 100,
    rxcnt: 100,
    txcnt: 100,
    total: 100,
    percent: 100,
    overage: 100
  };

  const usageDataMock2: CellularUsage = {
    name: "tnsDeviceName",
    startDate: "2020-01-01",
    endDate: "2020-01-02",
    planSize: 100,
    rxcnt: 100,
    txcnt: 100,
    total: 100,
    percent: 100,
    overage: 100
  };

  const billingPeriodMock1: CellularUsageBillingPeriod = {
    name: "tnsDeviceName",
    startDate: "2020-01-01",
    endDate: "2020-01-02"
  };

  const billingPeriodMock2: CellularUsageBillingPeriod = {
    name: "tnsDeviceName",
    startDate: "2020-01-01",
    endDate: "2020-01-02"
  };

  const billingMock1: CellularUsageBilling = {
    name: "tnsDeviceName",
    startDate: "2020-01-01",
    endDate: "2020-01-02",
    planSize: 100,
    rxcnt: 100,
    txcnt: 100,
    total: 100,
    percent: 100,
    overage: 100,
    dailyDeviceUsage: [
      {
        date: "2020-01-01",
        name: "tnsDeviceName",
        total: 100,
        status: DailyUsageStatus.ACTUAL_NO_OVERAGE
      }
    ]
  };

  const wirelessMock = {
    isWireless: true
  };

  // Tests that the loadHistorical method handles errors when the API call fails
  it("should handle errors when the API call fails in loadHistorical method", async () => {
    // Mock the getHistorical method of CellularUsageService to throw an error
    CellularUsageService.getHistorical = jest.fn().mockRejectedValue(new Error("API error"));

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadHistorical method
    await cellularUsage.loadHistorical("tnsDeviceName");

    // Check that the historical data is not set
    expect(cellularUsage.historical).toBeUndefined();
  });

  // Tests that the loadHistorical method successfully loads historical data when the API call is successful
  it("should load historical data when the API call is successful", async () => {
    // Mock the getHistorical method of CellularUsageService
    CellularUsageService.getHistorical = jest.fn().mockResolvedValue({ status: StatusCode.OK, data: [usageDataMock1, usageDataMock2] });

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadHistorical method
    await cellularUsage.loadHistorical("tnsDeviceName");

    // Check that the historical data is correctly set
    expect(cellularUsage.historical).toEqual([usageDataMock1, usageDataMock2]);
  });

  // Tests that the loadBillingPeriod method handles errors when the API call fails
  it("should handle errors when the API call fails in loadBillingPeriod method", async () => {
    // Mock the getBillingPeriod method of CellularUsageService to throw an error
    CellularUsageService.getBillingPeriod = jest.fn().mockRejectedValue(new Error("API error"));

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBillingPeriod method
    await cellularUsage.loadBillingPeriod("tnsDeviceName");

    // Check that the billing periods are not set
    expect(cellularUsage.billingPeriod).toBeUndefined();
  });

  // Tests that the loadBillingPeriod method successfully loads billing periods when the API call is successful
  it("should load billing periods when the API call is successful", async () => {
    // Mock the getBillingPeriod method of CellularUsageService
    CellularUsageService.getBillingPeriod = jest.fn().mockResolvedValue({ status: StatusCode.OK, data: [billingPeriodMock1, billingPeriodMock2] });

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBillingPeriod method
    await cellularUsage.loadBillingPeriod("tnsDeviceName");

    // Check that the billing periods are correctly set
    expect(cellularUsage.billingPeriod).toEqual([billingPeriodMock1, billingPeriodMock2]);
  });

  // Tests that the loadBilling method handles errors when the API call fails
  it("should handle errors when the API call fails in loadBilling method", async () => {
    // Mock the getBilling method of CellularUsageService to throw an error
    CellularUsageService.getBilling = jest.fn().mockRejectedValue(new Error("API error"));

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBilling method
    await cellularUsage.loadBilling({ startDate: "2022-01-01", endDate: "2022-01-31" });

    // Check that the billing data is not set
    expect(cellularUsage.billing).toBeUndefined();
  });

  // Tests that the loadBilling method successfully loads billing data when the API call is successful
  it("should load billing data when the API call is successful", async () => {
    // Mock the getBilling method of CellularUsageService
    CellularUsageService.getBilling = jest.fn().mockResolvedValue({ status: StatusCode.OK, data: { billingMock1 } });

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBilling method
    await cellularUsage.loadBilling({ startDate: "2022-01-01", endDate: "2022-01-31" });

    // Check that the billing data is correctly set
    expect(cellularUsage.billing).toEqual({ billingMock1 });
  });

  // Tests that the loadBilling method handles errors when the API call fails
  it("should handle errors when the API call fails in loadBilling method", async () => {
    // Mock the getBilling method of CellularUsageService to throw an error
    CellularUsageService.getWireless = jest.fn().mockRejectedValue(new Error("API error"));

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBilling method
    await cellularUsage.loadWireless("tnsDeviceName");

    // Check that the billing data is not set
    expect(cellularUsage.isWireless).toEqual(false);
  });

  // Tests that the loadBilling method successfully loads billing data when the API call is successful
  it("should load billing data when the API call is successful", async () => {
    // Mock the getBilling method of CellularUsageService
    CellularUsageService.getWireless = jest.fn().mockResolvedValue({ status: StatusCode.OK, data: wirelessMock });

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadBilling method
    await cellularUsage.loadWireless("tnsDeviceName");

    // Check that the billing data is correctly set
    expect(cellularUsage.isWireless).toEqual(true);
  });

  // Tests that the loadCurrent method handles errors when the API call fails
  it("should handle errors when the API call fails in loadCurrent method", async () => {
    // Mock the getCurrent method of CellularUsageService to throw an error
    CellularUsageService.getCurrent = jest.fn().mockRejectedValue(new Error("API error"));

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadCurrent method
    await cellularUsage.loadCurrent("tnsDeviceName");

    // Check that the current data is not set
    expect(cellularUsage.current).toBeUndefined();
  });

  // Tests that the loadCurrent method successfully loads current data when the API call is successful
  it("should load current data when the API call is successful", async () => {
    // Mock the getCurrent method of CellularUsageService
    CellularUsageService.getCurrent = jest.fn().mockResolvedValue({ status: StatusCode.OK, data: usageDataMock1 });

    // Create an instance of CellularUsage
    const cellularUsage = store.device.cellularUsage;

    // Call the loadCurrent method
    await cellularUsage.loadCurrent("tnsDeviceName");

    // Check that the current data is correctly set
    expect(cellularUsage.current).toEqual(usageDataMock1);
  });

  it("should set current date based on actual data usage", () => {
    const cellularUsage = store.device.cellularUsage;

    const usageBilling: CellularUsageBilling = {
      name: "Sample Billing",
      startDate: "2022-01-01",
      endDate: "2022-01-31",
      planSize: 100,
      rxcnt: 100,
      txcnt: 100,
      total: 100,
      percent: 100,
      overage: 100,
      dailyDeviceUsage: []
    };

    cellularUsage.setActualDataUsage(usageBilling);
    expect(cellularUsage.currentDate).toEqual(NaN);
  });
});
