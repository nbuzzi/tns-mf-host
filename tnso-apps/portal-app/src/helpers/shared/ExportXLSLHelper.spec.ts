// Generated by CodiumAI

import { WorkBook, utils } from "xlsx";
import { ExportXLSLHelper, TypeFile } from "./ExportXLSLHelper";

describe("ExportXLSLHelper", () => {
  // Successfully parse a CSV string into an array of objects
  it("should successfully parse a CSV string into an array of objects when valid CSV string is provided", () => {
    const csvString = "name,age\nJohn,25\nJane,30\n";
    const expectedData = [
      { name: "John", age: "25" },
      { name: "Jane", age: "30" }
    ];

    const result = ExportXLSLHelper.parseCsvString(csvString);

    expect(result).toEqual(expectedData);
  });

  // Successfully add a sheet to a workbook
  it("should successfully add a sheet to a workbook when valid data sheet and name page are provided", () => {
    const wb: WorkBook = utils.book_new();
    const dataSheet = [
      { name: "John", age: "25" },
      { name: "Jane", age: "30" }
    ];
    const namePage = 1;

    ExportXLSLHelper.addSheetToBook(wb, dataSheet, namePage);

    expect(wb.SheetNames).toContain(`Page_${namePage}`);
    expect(wb.Sheets[`Page_${namePage}`]).toBeDefined();
  });

  // Successfully export a workbook to an XLSX file
  it("should successfully export a workbook to an XLSX file when valid workbook and file name are provided", () => {
    const wb: WorkBook = utils.book_new();
    const dataSheet = [
      { name: "John", age: "25" },
      { name: "Jane", age: "30" }
    ];
    const namePage = 1;
    ExportXLSLHelper.addSheetToBook(wb, dataSheet, namePage);
    const fileName = "test";
    const typeFile = TypeFile.XLSX;

    ExportXLSLHelper.exportToXLSL(wb, fileName, typeFile);

    // Assert file is exported successfully
    // ...
  });

  // Handle empty CSV string when parsing
  it("should handle empty CSV string when parsing and return an empty array", () => {
    const csvString = "";

    const result = ExportXLSLHelper.parseCsvString(csvString);

    expect(result).toEqual([]);
  });

  // Handle CSV string with missing header when parsing
  it("should handle CSV string with missing header when parsing and return an array of objects with empty properties", () => {
    const csvString = "John,25\nJane,30\n";
    const expectedData = [{ "25": "30", John: "Jane" }];

    const result = ExportXLSLHelper.parseCsvString(csvString);

    expect(result).toEqual(expectedData);
  });

  // Handle CSV string with missing values when parsing
  it("should handle CSV string with missing values when parsing and return an array of objects with undefined properties", () => {
    const csvString = "name,age\nJohn,\nJane,30\n";
    const expectedData = [
      { name: "John", age: "" },
      { name: "Jane", age: "30" }
    ];

    const result = ExportXLSLHelper.parseCsvString(csvString);

    expect(result).toEqual(expectedData);
  });
});
