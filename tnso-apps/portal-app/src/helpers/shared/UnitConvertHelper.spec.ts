// Generated by CodiumAI

import { UnitConvertHelper } from "./UnitConvertHelper";

describe("convertBytesToMegaBytes", () => {
  // Input is a positive number
  it("should return the correct value when the input is a positive number", () => {
    const bytes = 1000000;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(1);
  });

  // Input is zero
  it("should return 0 when the input is zero", () => {
    const bytes = 0;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(0);
  });

  // Input is a multiple of 1000000
  it("should return the correct value when the input is a multiple of 1000000", () => {
    const bytes = 3000000;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(3);
  });

  // Input is negative
  it("should return a negative value when the input is negative", () => {
    const bytes = -1000000;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(-1);
  });

  // Input is NaN
  it("should return NaN when the input is NaN", () => {
    const bytes = NaN;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(NaN);
  });

  // Input is Infinity
  it("should return Infinity when the input is Infinity", () => {
    const bytes = Infinity;
    const result = UnitConvertHelper.convertBytesToMegaBytes(bytes);
    expect(result).toBe(Infinity);
  });
});
